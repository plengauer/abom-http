#!/bin/sh -e
directory="$1"
handler="$2"

serve_error() {
  print_status "$@"
  printf "\r\n"
}

serve_via_handler() {
  local handler="$1"
  local method="$2"
  local path_and_query="$3"
  if ! [ -x "$handler" ] && ! [ -x "$(which "$handler")" ]; then return 1; fi
  sh -c "$1"' ''"$@"' "$handler" "$method" "$path_and_query" || serve_error 500 Internal Error
}

print_status() {
  printf "HTTP/1.1 $*\r\n"
}

print_header() {
  printf "$1: $2\r\n"
}

read -r method path_and_query protocol
while read -r line; do
  line="$(printf "$line" | tr -d '\r')"
  case "$(printf "$line" | cut -d : -f 1 | tr '[:upper:]' '[:lower:]')" in
    content-length) length="$(printf "$line" | cut -d : -f 2 | tr -d ' ')";;
    *);;
  esac
  if [ "${#line}" = 0 ]; then break; fi
done

path="$(printf "$path_and_query" | cut -d ? -f 1)"
file="$directory/$path"
file_real="$file"
while ! [ -e "$file_real" ]; do file_real="$(dirname "$file_real")"; done
case "$file_real" in
  "$directory"/*) ;;
  *) file_real="";;
esac

echo -n "serving $path_and_query..." >&2
if [ -n "$length" ]; then
  head -c "$length"
else
  cat
fi | if printf "$path" | tr / '\n' | grep -qF '..'; then
  serve_error 403 Forbidden
elif ! [ -d "$file_real" ] && [ -x "$file_real" ]; then
  serve_via_handler "$file_real" "$method" "$path_and_query" || serve_error 500 Internal Error
else
  case "$method" in
    GET) [ -f "$file" ] && print_status 200 OK && print_header content-length "$(stat --printf="%s" "$file")" && print_header content-encoding identity && printf '\r\n' && cat "$file" || serve_via_handler "$handler" "$method" "$path_and_query" || serve_error 404 Not Found;;
    HEAD) print_status 200 && printf '\r\n';;
    POST) cat > "$file" && print_status 200 OK && printf '\r\n' || serve_via_handler "$handler" "$method" "$path_and_query" || serve_error 403 Forbidden;;
    PUT) mkdir -p "$(dirname "$path")" && touch "$file" && print_status 200 OK && printf '\r\n' || serve_via_handler "$handler" "$method" "$path_and_query" || serve_error 403 Forbidden;;
    DELETE) rm -rf "$file" && print_status 200 OK && printf '\r\n' || serve_via_handler "$handler" "$method" "$path_and_query" || [ -f "$file" ] && serve_error 404 Not Found || serve_error 403 Forbidden;;
    *) serve_error 405 Method Not Allowed;;
  esac
fi | {
  read -r line
  echo "$line"
  print_header server abom-http
  print_header connection close
  cat
}
echo " done" >&2
